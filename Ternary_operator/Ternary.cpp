#include <iostream>
#include <locale.h>

using namespace std;

/* Тернарный оператор - это оператор (уникальный для С++), который взаимодействует с тремя объектами. Это более краткая схематическая запись конструкции if else, необ-
ходимая в том случае, когда условия просты, действия, которые выполняются из них тоже просты и в одном экземпляре (одно действие на основании какого-то условия).
Главная разница между конструкцией if else в том, что это оператор! А любой оператор возвращает условие своей работы (выполняет свое действие и возвращает результат).
Конструкция if else результата не возвращает, она просто выполняет какие-то действия, которые необходимо сделать в случае правды условия и, если нужно, в случае ложнос-
ти условия.
Использовать тернарный оператор можно когда условия и действия от него зависящие достаточно просты, а также когда нужно вернуть результат проверки какого-то условия
(не просто выполнить действия, а результат проверки условия куда-то поместить.
  Три объекта тернарного оператора:
  - условие в скобках
  - действие в случае истины
  - действие в случае лжи */

int main()
{
	setlocale(LC_ALL, "rus");
	cout << "--------------------------------------------------------Программа сравнения двух чисел!----------------------------------------------------------" << endl;
	int A = 0, B = 0, max = 0, min = 0;
	cout << "Введите число А: "; cin >> A;
	cout << "Введите число B: "; cin >> B;

	// 1-Й ВАРИАНТ

	// Если нам результат какого-то условия нужно поместить в переменную, то тернарный оператор вернет результат и сохранит его в нужное место/хранилище
	/*
	if (A > B)max = A;									// если А>B, след, максимум равен А
	else max = B;
	*/
	// if (B > A)max = B; else max = A;					// аналогично выше

	/* Запишем это условие с помощью тернарного оператора. Как он записывается:
	Ставятся круглые скобки, в них мы пишем условие, которое проверяется. После круглых скобок ставится знак '?' и пишется то действие, которое нужно выполнить в случае
	если условие истина, в данном случае то, что будет помещено в переменную max. Дальше ставится двоеточие (оно разделяет блок if от блока else внутри терн.оператора),
	и пишется то действие, которое необходимо выполнить в том случае, когда условие ложно.

	Как читается:
	Присвоить переменной max, если А>B, значение переменной А, иначе присвоить значение переменной В
	(от '?' до ':' пишется действие в случае истины, а от ':' до ';' пишется действие в случае). */

	max = (A > B) ? A : B;

	/* Разница с if else:
		1. Оператор пишется целиком. В любом случае присутствует блок if, и блок else. Мы не можем отбросить блок else. Обязательно должны быть заполнены оба блока!
	(условие) ? действие_если_условие_истина : действие_если_условие_ложь
	Он возвращает либо выполняет действие, либо если мы присваиваем ему значение, то "действие_если_условие_истина" вернется и будет помещено в переменную max если ис-
	тина, а если ложь, то "действие_если_условие_ложь".
		2. Действия, выполняемые когда истина и когда ложь могут быть только одиночными (только одна команда) */

	min = (A < B) ? A : B;

	cout << "Максимум равен: " << max << endl;
	cout << "Минимум равен: " << min << endl;


	/* 2-Й ВАРИАНТ
	Если ту же самую задачу решать с помощью if else. Если число А явл. максимальным, то число В соответственно минимально. */

	if (A > B) { max = A; min = B; }
	else { max = B; min = A; }								// ';' тут нужны, т.к. это команды!
	cout << "Максимум равен: " << max << " Минимум равен: " << min << endl;

	/* Тут мы выполняем сразу два действия: если максимум А, то минимум В. Но тернарный оператор не может выполнить 2 действия одновременно, т.е. вот так не сработает:
	(A > B) ? { max = A; min = B; }, т.к. этот оператор может выполнить только одну команду в блоке своем, if или else!

	Но если мы тут подумаем еще хитрей:
	Вот этот вывод на экран же тоже одна команда: 	cout << "Максимум равен: " << max << "Минимум равен: " << min << endl;
	След. мы в тернарный оператор можем прописать эту команду cout	*/

	(A > B) ? cout << "Максимум равен: " << A << " Минимум равен: " << B << endl :			// после ':' мы можем перейти на строчку ниже		
		cout << "Максимум равен: " << B << " Минимум равен: " << A << endl;

	// Либо можно еще так сделать:
	cout << "Максимум равен: " << ((A > B) ? A : B) << " Минимум равен: " << ((A < B) ? A : B) << endl;

	/* Конструкцию if else мы не можем поместить в cout, а тернарный оператор можем!Но только поместив его полностью в круглые скобки!
	Мы видим что у тернарного оператора есть ряд преимуществ, его мы можем присвоить, вывести на экран и т.д., но мы должны помнить что он оперирует лишь одной командой
	и эта команда д/б простой, как например команда cout, поэтому все 4 варианта у нас сработают!

	Далее мы будем использовать тернарный оператор, когда нам нужно будет что-то куда-то сохранить, куда-то отправить в результате какой-то проверки. Т.е. не просто вы-
	полнить	действие, а еще и сохранять результат! Конечно порой if else логичнее, проще для понимания, но в плане краткости записи тернарный оператор проще! И основной
	его момент что он возвращает результат, т.е. вернет либо то, что от '?' до ':' либо то, что от ':' до конца ';' */
}